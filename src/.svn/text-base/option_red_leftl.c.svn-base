/*
** option_red_leftl.c for option_red_leftl in /home/dovan_n//svn/biji-repo1/src
** 
** Made by noel dovan
** Login   <dovan_n@epitech.net>
** 
** Started on  Fri Apr  5 17:02:47 2013 noel dovan
** Last update Tue May 14 19:18:11 2013 noel dovan
*/

#include "data.h"
#include "option_red.h"
#include "misc.h"
#include "exec_buf.h"
#include "create.h"

int	option_red_leftl_filspere(char *buf, t_all *all, int *pipefd)
{
  char	*buff;

  if ((buff = get_side_value(buf, '<', LEFT)) == NULL)
    return (1);
  epur_begin_end(buff);
  if (dup2(pipefd[0], 0) == -1)
    {
      free(buff);
      return (1);
    }
  if (exec_buf(buff, all) == -1)
    {
      free(buff);
      return (1);
    }
  free(buff);
  return (0);
}

int	option_red_leftl_write(char *buff, char *buff2, char *buff2b,
			       int *pipefd)
{
  char	*buff3;
  int	r;

  if ((buff3 = malloc(sizeof(*buff3) * SIZE)) == NULL)
    return (1);
  buff3[0] = '\0';
  buff3 = my_strcat(buff3, buff2);
  while (my_strcmp(buff, buff2b) != 0)
    {
      clean_str(buff2);
      clean_str(buff2b);
      my_printf("? ");
      if ((r = read(0, buff2, SIZE)) == -1)
	return (1);
      buff2[r] = '\0';
      buff2b = my_strcpy(buff2b, buff2);
      buff2b[r - 1] = '\0';
      buff3 = my_strcat(buff3, buff2);
    }
  if (write(pipefd[1], buff3, my_strlen(buff3)) == -1)
    return (1);
  free(buff3);
  return (0);
}

int	option_red_leftl_filsfils(char *buf, int *pipefd)
{
  char	*buff;
  char	*buff2;
  char	*buff2b;
  int	r;

  buff = get_side_value(buf, '<', RIGHT);
  if (check_correct_red(buff) == 1)
    return (1);
  buff2 = malloc(sizeof(*buff2) * SIZE);
  buff2b = malloc(sizeof(*buff2b) * SIZE);
  if (buff == NULL || buff2 == NULL || buff2b == NULL)
    return (1);
  epur_begin_end(buff);
  my_printf("? ");
  if ((r = read(0, buff2, SIZE)) == -1)
    return (1);
  buff2[r] = '\0';
  buff2b = my_strcpy(buff2b, buff2);
  buff2b[r - 1] = '\0';
  if (option_red_leftl_write(buff, buff2, buff2b, pipefd) == 1)
    return (1);
  free(buff);
  free(buff2);
  free(buff2b);
  return (0);
}

int	option_red_leftl_fils(char *buf, t_all *all, int *pipefd)
{
  pid_t	pid;

  if ((pid = fork()) == -1)
    return (1);
  if (pid == 0)
    {
      if (close(pipefd[0]) == -1)
	return (1);
      if (option_red_leftl_filsfils(buf, pipefd) == 1)
	return (1);
      return (1);
    }
  else
    {
      if (wait(0) == -1)
      	return (1);
      if (close(pipefd[1]) == -1)
	return (1);
      if (option_red_leftl_filspere(buf, all, pipefd) == 1)
	return (1);
    }
  return (0);
}

t_all	*option_red_leftl(char *buf, t_all *all, char **check)
{
  int	pipefd[2];
  pid_t	pid;

  check = check;
  if (pipe(pipefd) == -1)
    return (do_nul(all));
  if ((pid = fork()) == -1)
    return (do_nul(all));
  if (pid == 0)
    {
      check_red_begin(buf, "<<");
      option_red_leftl_fils(buf, all, pipefd);
      my_printf(" \b");
      return (do_nul(all));
    }
  else
    {
      if (wait(0) == -1)
	return (do_nul(all));
      if (dup2(1, pipefd[1]) == -1)
	return (do_nul(all));
      if (dup2(0, pipefd[0]) == -1)
	return (do_nul(all));
    }
  return (all);
}
